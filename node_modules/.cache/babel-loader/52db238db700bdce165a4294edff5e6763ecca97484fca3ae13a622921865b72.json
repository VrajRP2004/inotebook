{"ast":null,"code":"var _jsxFileName = \"D:\\\\coding\\\\Projects\\\\MERN stack inotebook project\\\\inotebook\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitaial = [];\n  const [notes, setNotes] = useState(notesInitaial);\n\n  //get all a Note\n  // console.log(\"Adding a new note\")\n  const getNotes = async () => {\n    // API Call \n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": \"localStorage.getItem('token')\"\n      }\n    });\n    const json = await response.json();\n    // const singleBracketData = json.flat();\n    // console.log(singleBracketData)\n    setNotes(json);\n  };\n\n  //Add a Note\n  // console.log(\"Adding a new note\")\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/allnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  };\n\n  // Delete a Note\n  const deleteNote = async id => {\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    console.log(\"Deleting the note with id\" + id);\n    const newNote = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNote);\n  };\n\n  // Edit a note\n  const editNote = async (id, title, description, tag) => {\n    //api call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    console.log(json);\n    //login to edit in client\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"z/gRqy+83YIxWtAZBmYsUdRFbK0=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitaial","notes","setNotes","getNotes","response","fetch","method","headers","json","addNote","title","description","tag","localStorage","getItem","body","JSON","stringify","note","concat","deleteNote","id","console","log","newNote","filter","_id","editNote","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/coding/Projects/MERN stack inotebook project/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\nimport { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\nconst NoteState = (props) => {\r\n    const host = \"http://localhost:5000\"\r\n    const notesInitaial =[]\r\n    \r\n    const [notes, setNotes] = useState(notesInitaial)\r\n\r\n    //get all a Note\r\n    // console.log(\"Adding a new note\")\r\n    const getNotes = async () => {\r\n        // API Call \r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            \"auth-token\": \"localStorage.getItem('token')\"\r\n          }\r\n        });\r\n        const json = await response.json()\r\n        // const singleBracketData = json.flat();\r\n        // console.log(singleBracketData)\r\n        setNotes(json)\r\n      }\r\n    \r\n\r\n    //Add a Note\r\n    // console.log(\"Adding a new note\")\r\n    const addNote =async (title, description, tag) => {\r\n        const response = await fetch(`${host}/api/notes/allnote`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({title,description,tag})\r\n        });\r\n\r\n        const note = await response.json()\r\n        setNotes(notes.concat(note))\r\n    }\r\n\r\n    // Delete a Note\r\n    const deleteNote = async (id) => {\r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token')\r\n            }\r\n        });\r\n        const json = response.json()\r\n        console.log(json)\r\n        console.log(\"Deleting the note with id\" + id)\r\n        const newNote = notes.filter((note) => {\r\n            return note._id !== id\r\n        })\r\n        setNotes(newNote)\r\n    }\r\n\r\n    // Edit a note\r\n    const editNote = async (id, title, description, tag) => {\r\n        //api call\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({title,description,tag})\r\n        });\r\n        const json = response.json();\r\n        console.log(json)\r\n        //login to edit in client\r\n        for (let index = 0; index < notes.length; index++) {\r\n            const element = notes[index]\r\n            if (element._id === id) {\r\n                element.title = title;\r\n                element.description = description;\r\n                element.tag = tag\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote,getNotes }}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}