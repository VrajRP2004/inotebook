{"ast":null,"code":"import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport findFocusedRoute from './findFocusedRoute';\nimport validatePathConfig from './validatePathConfig';\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(path, options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n  let initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  const screens = options === null || options === void 0 ? void 0 : options.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map(segment => {\n      const name = decodeURIComponent(segment);\n      return {\n        name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      // if b is longer, b get higher priority\n      if (aParts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (bParts[i] == null) {\n        return -1;\n      }\n      const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n\n  // Check for duplicate patterns in the config\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every(\n    // Make sure that none of the parent configs have a non-empty path defined\n    name => {\n      var _configs$find;\n      return !((_configs$find = configs.find(c => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);\n    }));\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(name => ({\n        name\n      })), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  let result;\n  let current;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const {\n    routes,\n    remainingPath\n  } = matchAgainstConfigs(remaining, configs.map(c => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n  })));\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      var _config$pattern;\n      const matchResult = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').reduce((acc, p, index) => {\n        if (!p.startsWith(':')) {\n          return acc;\n        }\n\n        // Path parameter so increment position for the segment\n        acc.pos += 1;\n        const decodedParamSegment = decodeURIComponent(\n        // The param segments appear every second item starting from 2 in the regex match result\n        match[(acc.pos + 1) * 2]\n        // Remove trailing slash\n        .replace(/\\/$/, ''));\n        Object.assign(acc.matchedParams, {\n          [p]: Object.assign(acc.matchedParams[p] || {}, {\n            [index]: decodedParamSegment\n          })\n        });\n        return acc;\n      }, {\n        pos: -1,\n        matchedParams: {}\n      });\n      const matchedParams = matchResult.matchedParams || {};\n      routes = config.routeNames.map(name => {\n        var _routeConfig$pattern$;\n        const routeConfig = configs.find(c => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.path.split('/').filter(Boolean).join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig === null || routeConfig === void 0 ? void 0 : (_routeConfig$pattern$ = routeConfig.pattern\n        // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n        .replace(new RegExp(`${escape(normalizedPath)}$`), '')) === null || _routeConfig$pattern$ === void 0 ? void 0 : _routeConfig$pattern$.split('/').length;\n        const params = normalizedPath === null || normalizedPath === void 0 ? void 0 : normalizedPath.split('/').reduce((acc, p, index) => {\n          var _matchedParams$p;\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n\n          // Get the real index of the path parameter in the matched path\n          // by offsetting by the number of segments in the initial pattern\n          const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n          const value = (_matchedParams$p = matchedParams[p]) === null || _matchedParams$p === void 0 ? void 0 : _matchedParams$p[index + offset];\n          if (value) {\n            var _routeConfig$parse;\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = routeConfig !== null && routeConfig !== void 0 && (_routeConfig$parse = routeConfig.parse) !== null && _routeConfig$parse !== void 0 && _routeConfig$parse[key] ? routeConfig.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n  return {\n    routes,\n    remainingPath\n  };\n};\nconst createNormalizedConfigs = function (screen, routeConfig) {\n  let routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let initials = arguments.length > 3 ? arguments[3] : undefined;\n  let parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  let parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(nestedConfig => {\n        const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nconst createConfigItem = (screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\nconst createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n  let state;\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    let nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n  route.path = path;\n  const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = {\n      ...route.params,\n      ...params\n    };\n  }\n  return state;\n};\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","_configs$find","c","screen","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","joinPaths","_len","arguments","paths","Array","_key","p","_config$pattern","matchResult","index","pos","decodedParamSegment","matchedParams","_routeConfig$pattern$","routeConfig","normalizedPath","numInitialSegments","params","_matchedParams$p","offset","value","_routeConfig$parse","parse","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"sources":["../../src/getStateFromPath.tsx"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}