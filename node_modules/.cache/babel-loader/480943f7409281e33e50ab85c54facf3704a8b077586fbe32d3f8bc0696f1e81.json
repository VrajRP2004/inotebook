{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport const StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  pop() {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  const router = {\n    ...BaseRouter,\n    type: 'stack',\n    getInitialState(_ref) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref;\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [{\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState(partialState, _ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => ({\n        ...route,\n        key: route.key || `${route.name}-${nanoid()}`,\n        params: routeParamList[route.name] !== undefined ? {\n          ...routeParamList[route.name],\n          ...route.params\n        } : route.params\n      }));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n    getStateForRouteNamesChange(state, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref3;\n      const routes = state.routes.filter(route => routeNames.includes(route.name) && !routeKeyChanges.includes(route.name));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1)\n      };\n    },\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            const {\n              name,\n              key,\n              params\n            } = action.payload;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return {\n              ...state,\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : `${name}-${nanoid()}`,\n                name,\n                params: routeParamList[name] !== undefined ? {\n                  ...routeParamList[name],\n                  ...params\n                } : params\n              } : route)\n            };\n          }\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            const route = id ? state.routes.find(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n              params: route.params\n            }))) : undefined;\n            let routes;\n            if (route) {\n              routes = state.routes.filter(r => r.key !== route.key);\n              routes.push({\n                ...route,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              });\n            } else {\n              routes = [...state.routes, {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n            }\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes\n            };\n          }\n          return null;\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return {\n                ...state,\n                index: routes.length - 1,\n                routes\n              };\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n            const getId =\n            // `getId` and `key` can't be used together\n            action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              })));\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [...state.routes, {\n                key: action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1\n              };\n            }\n            const route = state.routes[index];\n            let params;\n            if (action.payload.merge) {\n              params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                ...routeParamList[route.name],\n                ...route.params,\n                ...action.payload.params\n              } : route.params;\n            } else {\n              params = routeParamList[route.name] !== undefined ? {\n                ...routeParamList[route.name],\n                ...action.payload.params\n              } : action.payload.params;\n            }\n            return {\n              ...state,\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params || action.payload.path && action.payload.path !== route.path ? {\n                ...route,\n                path: action.payload.path ?? route.path,\n                params\n              } : state.routes[index]]\n            };\n          }\n          return null;\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  };\n  return router;\n}","map":{"version":3,"names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","arguments","length","undefined","popToTop","StackRouter","options","router","getInitialState","_ref","routeNames","routeParamList","initialRouteName","includes","stale","key","index","routes","getRehydratedState","partialState","_ref2","state","filter","route","map","getStateForRouteNamesChange","_ref3","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","path","merge","actionCreators"],"sources":["D:\\coding\\Projects\\MERN stack inotebook project\\inotebook\\node_modules\\@react-navigation\\routers\\src\\StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}