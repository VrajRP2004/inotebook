{"ast":null,"code":"var _jsxFileName = \"D:\\\\coding\\\\Projects\\\\MERN stack inotebook project\\\\inotebook\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitaial = [];\n  const [notes, setNotes] = useState(notesInitaial);\n\n  //get all a Note\n  // console.log(\"Adding a new note\")\n  const getNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYwMjhhMGUxZjJiNDJhOGQ1YjFlMTg1In0sImlhdCI6MTcxMTQ0MjQ0Nn0.GxB4B9cqgOdkgk2dUdOjq_vkfl0qqRfyWKTCxGlPC4Q'\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n    // setNotes()\n  };\n\n  //Add a Note\n  // console.log(\"Adding a new note\")\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/allnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYwMjhhMGUxZjJiNDJhOGQ1YjFlMTg1In0sImlhdCI6MTcxMTQ0MjQ0Nn0.GxB4B9cqgOdkgk2dUdOjq_vkfl0qqRfyWKTCxGlPC4Q'\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    let note = {\n      \"_id\": _id,\n      \"user\": \"66028a0e1f2b42a8d5b1e185\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"data\": \"2024-03-26T08:56:09.262Z\",\n      \"__v\": 0\n    };\n    setNotes(notes.concat(note));\n  };\n\n  // Delete a Note\n  const deleteNote = id => {\n    console.log(\"Deleting the note with id\" + id);\n    const newNote = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNote);\n  };\n\n  // Edit a note\n  const editNote = async (id, title, description, tag) => {\n    //api call\n\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': 'eyJhbGciiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYwMjhhMGUxZjJiNDJhOGQ1YjFlMTg1In0sImlhdCI6MTcxMTQ0MjQ0Nn0.GxB4B9cqgOdkgk2dUdOjq_vkfl0qqRfyWKTCxGlPC4Q'\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    //login to edit in client\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"z/gRqy+83YIxWtAZBmYsUdRFbK0=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitaial","notes","setNotes","getNotes","response","fetch","method","headers","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","_id","concat","deleteNote","id","newNote","filter","editNote","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/coding/Projects/MERN stack inotebook project/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\nimport { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\nconst NoteState = (props) => {\r\n    const host = \"http://localhost:5000\"\r\n    const notesInitaial =[]\r\n\r\n    const [notes, setNotes] = useState(notesInitaial)\r\n\r\n    //get all a Note\r\n    // console.log(\"Adding a new note\")\r\n    const getNotes =async () => {\r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYwMjhhMGUxZjJiNDJhOGQ1YjFlMTg1In0sImlhdCI6MTcxMTQ0MjQ0Nn0.GxB4B9cqgOdkgk2dUdOjq_vkfl0qqRfyWKTCxGlPC4Q'\r\n            }\r\n        });\r\n        const json = await response.json()\r\n        console.log(json)\r\n        setNotes(json)\r\n        // setNotes()\r\n\r\n    }\r\n\r\n    //Add a Note\r\n    // console.log(\"Adding a new note\")\r\n    const addNote =async (title, description, tag) => {\r\n        const response = await fetch(`${host}/api/notes/allnote`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYwMjhhMGUxZjJiNDJhOGQ1YjFlMTg1In0sImlhdCI6MTcxMTQ0MjQ0Nn0.GxB4B9cqgOdkgk2dUdOjq_vkfl0qqRfyWKTCxGlPC4Q'\r\n            },\r\n            body: JSON.stringify({title,description,tag})\r\n        });\r\n        let note = {\r\n            \"_id\": _id,\r\n            \"user\": \"66028a0e1f2b42a8d5b1e185\",\r\n            \"title\": title,\r\n            \"description\": description,\r\n            \"tag\": tag,\r\n            \"data\": \"2024-03-26T08:56:09.262Z\",\r\n            \"__v\": 0\r\n        };\r\n        setNotes(notes.concat(note))\r\n    }\r\n\r\n    // Delete a Note\r\n    const deleteNote = (id) => {\r\n        console.log(\"Deleting the note with id\" + id)\r\n        const newNote = notes.filter((note) => {\r\n            return note._id !== id\r\n        })\r\n        setNotes(newNote)\r\n    }\r\n\r\n    // Edit a note\r\n    const editNote = async (id, title, description, tag) => {\r\n        //api call\r\n\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': 'eyJhbGciiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYwMjhhMGUxZjJiNDJhOGQ1YjFlMTg1In0sImlhdCI6MTcxMTQ0MjQ0Nn0.GxB4B9cqgOdkgk2dUdOjq_vkfl0qqRfyWKTCxGlPC4Q'\r\n            },\r\n            body: JSON.stringify({title,description,tag})\r\n        });\r\n        const json = response.json();\r\n        //login to edit in client\r\n        for (let index = 0; index < notes.length; index++) {\r\n            const element = notes[index]\r\n            if (element._id === id) {\r\n                element.title = title;\r\n                element.description = description;\r\n                element.tag = tag\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote,getNotes }}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}